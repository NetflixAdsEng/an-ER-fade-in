const packageJson = require('../package.json');

const path = require('path');
var argv = require('minimist')(process.argv.slice(2));

// set app path
global.rootPath = path.resolve(__dirname + '/..') + '/';

const paths = require('./paths');
const installer = require('./installer');
const gwd = require('./gwd');
const build = require('./build');
const publish = require('./publish');
const tracker = require('./tracker');

const debug = require('debug');
const log = debug(packageJson.name + ':api');
if ('silence' in argv) {
  debug.disable(true);
}

// help
if (argv.help) {
  log(
    `CLI OPTIONS:\n` +
      `node ./lib/api.js\n` +
      `-------------------------------------------------------------------------------------------\n` +
      ` --cmd	API COMMAND, options include:\n` +
      `    "install"     install git-hooks\n` +
      `    "build"       use GWD "manifest.json" to create component's "link file", "preview file", and "boilerplate tests file"\n` +
      `    "publish"     publish ${paths.srcFolderPath()} to ${paths.distFolderPath()},\n` +
      `                  mark generic-source as "published",\n` +
      `                  create GWD package at ${paths.distGwdPath()}\n` +
      `    "track"       saves current package.version to the Generic-Source-Tracker file \n\n` +
      ` --silence, squelches console output\n` +
      `-------------------------------------------------------------------------------------------`
  );
  process.exit();
}

// api command
if (!('cmd' in argv)) {
  console.error('No API COMMAND (--cmd) specified');
  process.exit();
}

/* -- INSTALLATION ----
 *
 *		
 */
if (argv.cmd == 'install') {
  // add generic-source data to component
  installer
    .attachGenericSource()

    // flag prevents other API command from running without running `npm run init`
    .then(() => {
      return installer.addInit();
    })
    .catch(err => {
      console.error(err);
    });
} else if (!installer.hasInit()) {
  console.log('ERROR!!');
  log('You must run `npm run init`');
} else if (argv.cmd == 'track') {
  /* -- TRACKING ----
 *
 *		
 */
  log('Updating package.json & trackers');

  // update username and date-modified
  log(` - indicating username`);
  tracker
    .markUserAction(packageJson)

    // update branch/commit version
    .then(packageJson => {
      log(` - adding package version ${packageJson.version}`);
      return tracker.markVersion(packageJson);
    })

    // find and update tracker file
    .then(packageJson => {
      log(` - updating tracker ${packageJson.genericSource.id}.js`);
      return tracker.updateTracker(packageJson);
    })

    .catch(err => {
      console.error(err);
    });
} else if (argv.cmd == 'build') {
  /* -- BUILD ----
 *
 *		Creates ./src files from ./tmpl templates
 *		 - ./src/component_link.html
 *		 - ./src/index.html
 *		 - ./src/boilerplate_tests.html
 *		 - ./index.js: for NPM style depedencies
 */
  // load manifest
  gwd
    .loadGwdManifest()

    .then(manifest => {
      // implement link template
      log('Implementing ' + paths.COMPONENT_LINK_FILENAME);
      build
        .linkTemplate(
          manifest,
          paths.tmplFolderPath() + paths.COMPONENT_LINK_FILENAME,
          paths.srcFolderPath() + paths.COMPONENT_LINK_FILENAME
        )

        // implement index preview template
        .then(() => {
          log('Implementing ' + paths.COMPONENT_PREVIEW_FILENAME);
          return build.template(
            manifest,
            paths.tmplFolderPath() + paths.COMPONENT_PREVIEW_FILENAME,
            paths.COMPONENT_LINK_FILENAME,
            paths.srcFolderPath() + paths.COMPONENT_PREVIEW_FILENAME
          );
        })

        // implement boilerplate-test template
        .then(() => {
          log('Implementing Web-Component in boilerplate tests');
          return build.template(
            manifest,
            paths.tmplFolderPath() + paths.BOILERPLATE_TESTS_FILENAME,
            '../' + paths.SRC_FOLDER + paths.COMPONENT_LINK_FILENAME,
            paths.testFolderPath() + paths.BOILERPLATE_TESTS_FILENAME
          );
        })

        // implement NPM entry
        .then(() => {
          log('Implementing NPM entry "./index.js"');
          return build.npmEntry(manifest, paths.tmplFolderPath() + paths.NPM_ENTRY_FILENAME);
        })

        .catch(err => {
          console.error(err);
        });
    })
    .catch(err => {
      console.error(err);
    });
} else if (argv.cmd == 'publish') {
  /* -- PUBLISH ----
 *
 *		Creates ./dist files from ./src
 *		 - ./dist/src: for C20 preview & download
 *		 - ./dist/gwd: for Google Web Designer
 *
 *		Indicate C20-generic-source is "published"
 */
  // load manifest
  gwd
    .loadGwdManifest()

    .then(manifest => {
      // copy src to dist
      log(`Publishing Src package to: ${paths.distSrcPath()}`);
      publish
        .src(paths.distSrcPath())

        // mark generic-source as "published"
        .then(() => {
          log('Marking GenericSource.state as "published"');
          return tracker.markPublished();
        })

        // create gwd package: for integrating in GWD
        .then(() => {
          log(`Publishing GWD component to: ${paths.distGwdPath()}`);
          return gwd.publishComponent();
        })
        .catch(err => {
          console.error(err);
        });
    })
    .catch(err => {
      console.error(err);
    });
}
